-- Copyright (C) 2015 Tomoyuki Fujimori <moyu@dromozoa.com>
--
-- This file is part of dromozoa-xml.
--
-- dromozoa-xml is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- dromozoa-xml is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with dromozoa-xml.  If not, see <http://www.gnu.org/licenses/>.

local sequence = require "dromozoa.commons.sequence"
local xml = require "dromozoa.xml"

local e1 = xml.decode("<E/>")
local e2 = xml.decode("<F foo='bar'/>")
local e3 = xml.decode("<E foo='bar'/>")
local e4 = xml.decode("<E foo='42'/>")
local e5 = xml.decode("<E foo='42 bar'/>")
local e6 = xml.decode("<E foo='bar 69'/>")
local e7 = xml.decode("<E foo='42 bar 69'/>")
local e8 = xml.decode("<E foo='en'/>")
local e9 = xml.decode("<E foo='en-US'/>")
local e10 = xml.decode("<E class=''/>")
local e11 = xml.decode("<E class='error'/>")
local e12 = xml.decode("<E class='error warning'/>")
local e13 = xml.decode("<E id='42'/>")
local e14 = xml.decode("<E id='myid'/>")

assert(    xml.selector("*")              :test({ e1 }))
assert(    xml.selector("E")              :test({ e1 }))
assert(not xml.selector("E")              :test({ e2 }))
assert(not xml.selector("E[foo]")         :test({ e1 }))
assert(not xml.selector("E[foo]")         :test({ e2 }))
assert(    xml.selector("E[foo]")         :test({ e3 }))
assert(    xml.selector("E[foo=\"bar\"]") :test({ e3 }))
assert(not xml.selector("E[foo=\"bar\"]") :test({ e4 }))
assert(    xml.selector("E[foo~=\"bar\"]"):test({ e3 }))
assert(not xml.selector("E[foo~=\"bar\"]"):test({ e4 }))
assert(    xml.selector("E[foo~=\"bar\"]"):test({ e5 }))
assert(    xml.selector("E[foo~=\"bar\"]"):test({ e6 }))
assert(    xml.selector("E[foo~=\"bar\"]"):test({ e7 }))
assert(    xml.selector("E[foo^=\"bar\"]"):test({ e3 }))
assert(not xml.selector("E[foo^=\"bar\"]"):test({ e4 }))
assert(not xml.selector("E[foo^=\"bar\"]"):test({ e5 }))
assert(    xml.selector("E[foo^=\"bar\"]"):test({ e6 }))
assert(not xml.selector("E[foo^=\"bar\"]"):test({ e7 }))
assert(    xml.selector("E[foo$=\"bar\"]"):test({ e3 }))
assert(not xml.selector("E[foo$=\"bar\"]"):test({ e4 }))
assert(    xml.selector("E[foo$=\"bar\"]"):test({ e5 }))
assert(not xml.selector("E[foo$=\"bar\"]"):test({ e6 }))
assert(not xml.selector("E[foo$=\"bar\"]"):test({ e7 }))
assert(    xml.selector("E[foo*=\"bar\"]"):test({ e3 }))
assert(not xml.selector("E[foo*=\"bar\"]"):test({ e4 }))
assert(    xml.selector("E[foo*=\"bar\"]"):test({ e5 }))
assert(    xml.selector("E[foo*=\"bar\"]"):test({ e6 }))
assert(    xml.selector("E[foo*=\"bar\"]"):test({ e7 }))
assert(not xml.selector("E[foo|=\"en\"]") :test({ e3 }))
assert(not xml.selector("E[foo|=\"en\"]") :test({ e4 }))
assert(    xml.selector("E[foo|=\"en\"]") :test({ e8 }))
assert(    xml.selector("E[foo|=\"en\"]") :test({ e9 }))
assert(not xml.selector("E.warning")      :test({ e1 }))
assert(not xml.selector("E.warning")      :test({ e3 }))
assert(not xml.selector("E.warning")      :test({ e10 }))
assert(not xml.selector("E.warning")      :test({ e11 }))
assert(    xml.selector("E.warning")      :test({ e12 }))
assert(not xml.selector("*.warning")      :test({ e1 }))
assert(not xml.selector("*.warning")      :test({ e3 }))
assert(not xml.selector("*.warning")      :test({ e10 }))
assert(not xml.selector("*.warning")      :test({ e11 }))
assert(    xml.selector("*.warning")      :test({ e12 }))
assert(not xml.selector(".warning")       :test({ e1 }))
assert(not xml.selector(".warning")       :test({ e3 }))
assert(not xml.selector(".warning")       :test({ e10 }))
assert(not xml.selector(".warning")       :test({ e11 }))
assert(    xml.selector(".warning")       :test({ e12 }))
assert(not xml.selector("E#myid")         :test({ e1 }))
assert(not xml.selector("E#myid")         :test({ e3 }))
assert(not xml.selector("E#myid")         :test({ e13 }))
assert(    xml.selector("E#myid")         :test({ e14 }))
assert(not xml.selector("*#myid")         :test({ e1 }))
assert(not xml.selector("*#myid")         :test({ e3 }))
assert(not xml.selector("*#myid")         :test({ e13 }))
assert(    xml.selector("*#myid")         :test({ e14 }))
assert(not xml.selector("#myid")          :test({ e1 }))
assert(not xml.selector("#myid")          :test({ e3 }))
assert(not xml.selector("#myid")          :test({ e13 }))
assert(    xml.selector("#myid")          :test({ e14 }))
assert(not xml.selector("E F")            :test({ e1, e1 }))
assert(    xml.selector("E F")            :test({ e1, e2 }))
assert(not xml.selector("E F")            :test({ e2, e2 }))
assert(    xml.selector("E F")            :test({ e1, e2, e2 }))
assert(not xml.selector("E>F")            :test({ e1, e1 }))
assert(    xml.selector("E>F")            :test({ e1, e2 }))
assert(not xml.selector("E>F")            :test({ e2, e2 }))
assert(not xml.selector("E>F")            :test({ e1, e2, e2 }))
assert(    xml.selector("D,E")            :test({ e1 }))
assert(not xml.selector("D,E")            :test({ e2 }))
assert(    xml.selector("A,B,C,D,E")      :test({ e1 }))
assert(not xml.selector("A,B,C,D,E")      :test({ e2 }))
assert(not xml.selector(":not(E)")        :test({ e1 }))
assert(    xml.selector(":not(E)")        :test({ e2 }))

assert(not xml.selector("[foo=bar]>[foo='42']>[foo^=bar]") :test({ e3, e4, e5 }))
assert(    xml.selector("[foo=bar]>[foo='42']>[foo^=bar]") :test({ e3, e4, e6 }))
assert(not xml.selector("[foo=bar]>[foo='42']>[foo^=bar]") :test({ e3, e3, e5 }))
assert(not xml.selector("[foo=bar] [foo='42'] [foo^=bar]") :test({ e3, e4, e5 }))
assert(    xml.selector("[foo=bar] [foo='42'] [foo^=bar]") :test({ e3, e4, e6 }))
assert(not xml.selector("[foo=bar] [foo='42'] [foo^=bar]") :test({ e3, e3, e5 }))
assert(not xml.selector("[foo~='42'][foo~=bar][foo~='69']"):test({ e5 }))
assert(not xml.selector("[foo~='42'][foo~=bar][foo~='69']"):test({ e6 }))
assert(    xml.selector("[foo~='42'][foo~=bar][foo~='69']"):test({ e7 }))
